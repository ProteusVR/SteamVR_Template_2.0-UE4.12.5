// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/VRExpansionPluginPrivatePCH.h"
#include "VRExpansionPlugin.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1VRExpansionPlugin() {}
FName VREXPANSIONPLUGIN_NotifyDrop = FName(TEXT("NotifyDrop"));
FName VREXPANSIONPLUGIN_NotifyOfTeleport = FName(TEXT("NotifyOfTeleport"));
FName VREXPANSIONPLUGIN_Server_SendControllerTransform = FName(TEXT("Server_SendControllerTransform"));
FName VREXPANSIONPLUGIN_Server_SendTransform = FName(TEXT("Server_SendTransform"));
FName VREXPANSIONPLUGIN_ServerMoveVR = FName(TEXT("ServerMoveVR"));
FName VREXPANSIONPLUGIN_ServerMoveVRDual = FName(TEXT("ServerMoveVRDual"));
FName VREXPANSIONPLUGIN_ServerMoveVRDualHybridRootMotion = FName(TEXT("ServerMoveVRDualHybridRootMotion"));
static class UEnum* EBPHMDDeviceType_StaticEnum()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EBPHMDDeviceType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VRExpansionPlugin_EBPHMDDeviceType, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("EBPHMDDeviceType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EBPHMDDeviceType(EBPHMDDeviceType_StaticEnum, TEXT("/Script/VRExpansionPlugin"), TEXT("EBPHMDDeviceType"), false, nullptr, nullptr);
static class UEnum* EGripCollisionType_StaticEnum()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("EGripCollisionType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGripCollisionType(EGripCollisionType_StaticEnum, TEXT("/Script/VRExpansionPlugin"), TEXT("EGripCollisionType"), false, nullptr, nullptr);
class UScriptStruct* FBPActorPhysicsHandleInformation::StaticStruct()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FBPActorPhysicsHandleInformation();
		extern VREXPANSIONPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FBPActorPhysicsHandleInformation_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FBPActorPhysicsHandleInformation, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("BPActorPhysicsHandleInformation"), sizeof(FBPActorPhysicsHandleInformation), Get_Z_Construct_UScriptStruct_FBPActorPhysicsHandleInformation_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FBPActorPhysicsHandleInformation(FBPActorPhysicsHandleInformation::StaticStruct, TEXT("/Script/VRExpansionPlugin"), TEXT("BPActorPhysicsHandleInformation"), false, nullptr, nullptr);
static struct FScriptStruct_VRExpansionPlugin_StaticRegisterNativesFBPActorPhysicsHandleInformation
{
	FScriptStruct_VRExpansionPlugin_StaticRegisterNativesFBPActorPhysicsHandleInformation()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("BPActorPhysicsHandleInformation")),new UScriptStruct::TCppStructOps<FBPActorPhysicsHandleInformation>);
	}
} ScriptStruct_VRExpansionPlugin_StaticRegisterNativesFBPActorPhysicsHandleInformation;
class UScriptStruct* FBPActorGripInformation::StaticStruct()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FBPActorGripInformation();
		extern VREXPANSIONPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FBPActorGripInformation_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FBPActorGripInformation, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("BPActorGripInformation"), sizeof(FBPActorGripInformation), Get_Z_Construct_UScriptStruct_FBPActorGripInformation_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FBPActorGripInformation(FBPActorGripInformation::StaticStruct, TEXT("/Script/VRExpansionPlugin"), TEXT("BPActorGripInformation"), false, nullptr, nullptr);
static struct FScriptStruct_VRExpansionPlugin_StaticRegisterNativesFBPActorGripInformation
{
	FScriptStruct_VRExpansionPlugin_StaticRegisterNativesFBPActorGripInformation()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("BPActorGripInformation")),new UScriptStruct::TCppStructOps<FBPActorGripInformation>);
	}
} ScriptStruct_VRExpansionPlugin_StaticRegisterNativesFBPActorGripInformation;
class UScriptStruct* FBPVRComponentPosRep::StaticStruct()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVRComponentPosRep();
		extern VREXPANSIONPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FBPVRComponentPosRep_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FBPVRComponentPosRep, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("BPVRComponentPosRep"), sizeof(FBPVRComponentPosRep), Get_Z_Construct_UScriptStruct_FBPVRComponentPosRep_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FBPVRComponentPosRep(FBPVRComponentPosRep::StaticStruct, TEXT("/Script/VRExpansionPlugin"), TEXT("BPVRComponentPosRep"), false, nullptr, nullptr);
static struct FScriptStruct_VRExpansionPlugin_StaticRegisterNativesFBPVRComponentPosRep
{
	FScriptStruct_VRExpansionPlugin_StaticRegisterNativesFBPVRComponentPosRep()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("BPVRComponentPosRep")),new UScriptStruct::TCppStructOps<FBPVRComponentPosRep>);
	}
} ScriptStruct_VRExpansionPlugin_StaticRegisterNativesFBPVRComponentPosRep;
	void UGripMotionControllerComponent::NotifyDrop(FBPActorGripInformation const& NewDrop, bool bSimulate)
	{
		GripMotionControllerComponent_eventNotifyDrop_Parms Parms;
		Parms.NewDrop=NewDrop;
		Parms.bSimulate=bSimulate ? true : false;
		ProcessEvent(FindFunctionChecked(VREXPANSIONPLUGIN_NotifyDrop),&Parms);
	}
	void UGripMotionControllerComponent::Server_SendControllerTransform(FBPVRComponentPosRep NewTransform)
	{
		GripMotionControllerComponent_eventServer_SendControllerTransform_Parms Parms;
		Parms.NewTransform=NewTransform;
		ProcessEvent(FindFunctionChecked(VREXPANSIONPLUGIN_Server_SendControllerTransform),&Parms);
	}
	void UGripMotionControllerComponent::StaticRegisterNativesUGripMotionControllerComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "AddSecondaryAttachmentPoint",(Native)&UGripMotionControllerComponent::execAddSecondaryAttachmentPoint);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "ConvertToControllerRelativeTransform",(Native)&UGripMotionControllerComponent::execConvertToControllerRelativeTransform);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "DropActor",(Native)&UGripMotionControllerComponent::execDropActor);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "DropComponent",(Native)&UGripMotionControllerComponent::execDropComponent);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "DropGrip",(Native)&UGripMotionControllerComponent::execDropGrip);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "GetGrippedActors",(Native)&UGripMotionControllerComponent::execGetGrippedActors);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "GetPhysicsVelocities",(Native)&UGripMotionControllerComponent::execGetPhysicsVelocities);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "GripActor",(Native)&UGripMotionControllerComponent::execGripActor);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "GripComponent",(Native)&UGripMotionControllerComponent::execGripComponent);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "IsTracked",(Native)&UGripMotionControllerComponent::execIsTracked);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "NotifyDrop",(Native)&UGripMotionControllerComponent::execNotifyDrop);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "OnRep_GrippedActors",(Native)&UGripMotionControllerComponent::execOnRep_GrippedActors);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "OnRep_ReplicatedControllerTransform",(Native)&UGripMotionControllerComponent::execOnRep_ReplicatedControllerTransform);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "PostTeleportMoveGrippedActors",(Native)&UGripMotionControllerComponent::execPostTeleportMoveGrippedActors);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "RemoveSecondaryAttachmentPoint",(Native)&UGripMotionControllerComponent::execRemoveSecondaryAttachmentPoint);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "Server_SendControllerTransform",(Native)&UGripMotionControllerComponent::execServer_SendControllerTransform);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "TeleportMoveGrip",(Native)&UGripMotionControllerComponent::execTeleportMoveGrip);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "TeleportMoveGrippedActor",(Native)&UGripMotionControllerComponent::execTeleportMoveGrippedActor);
		FNativeFunctionRegistrar::RegisterFunction(UGripMotionControllerComponent::StaticClass(), "TeleportMoveGrippedComponent",(Native)&UGripMotionControllerComponent::execTeleportMoveGrippedComponent);
	}
	IMPLEMENT_CLASS(UGripMotionControllerComponent, 923986104);
	void UParentRelativeAttachmentComponent::StaticRegisterNativesUParentRelativeAttachmentComponent()
	{
	}
	IMPLEMENT_CLASS(UParentRelativeAttachmentComponent, 1347516852);
	void UReplicatedVRCameraComponent::Server_SendTransform(FBPVRComponentPosRep NewTransform)
	{
		ReplicatedVRCameraComponent_eventServer_SendTransform_Parms Parms;
		Parms.NewTransform=NewTransform;
		ProcessEvent(FindFunctionChecked(VREXPANSIONPLUGIN_Server_SendTransform),&Parms);
	}
	void UReplicatedVRCameraComponent::StaticRegisterNativesUReplicatedVRCameraComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UReplicatedVRCameraComponent::StaticClass(), "OnRep_ReplicatedTransform",(Native)&UReplicatedVRCameraComponent::execOnRep_ReplicatedTransform);
		FNativeFunctionRegistrar::RegisterFunction(UReplicatedVRCameraComponent::StaticClass(), "Server_SendTransform",(Native)&UReplicatedVRCameraComponent::execServer_SendTransform);
	}
	IMPLEMENT_CLASS(UReplicatedVRCameraComponent, 189530921);
static class UEnum* EVRControllerProperty_String_StaticEnum()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRControllerProperty_String();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VRExpansionPlugin_EVRControllerProperty_String, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("EVRControllerProperty_String"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EVRControllerProperty_String(EVRControllerProperty_String_StaticEnum, TEXT("/Script/VRExpansionPlugin"), TEXT("EVRControllerProperty_String"), false, nullptr, nullptr);
static class UEnum* EVRDeviceProperty_Float_StaticEnum()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Float();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Float, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("EVRDeviceProperty_Float"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EVRDeviceProperty_Float(EVRDeviceProperty_Float_StaticEnum, TEXT("/Script/VRExpansionPlugin"), TEXT("EVRDeviceProperty_Float"), false, nullptr, nullptr);
static class UEnum* EVRDeviceProperty_Bool_StaticEnum()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Bool();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Bool, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("EVRDeviceProperty_Bool"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EVRDeviceProperty_Bool(EVRDeviceProperty_Bool_StaticEnum, TEXT("/Script/VRExpansionPlugin"), TEXT("EVRDeviceProperty_Bool"), false, nullptr, nullptr);
static class UEnum* EVRDeviceProperty_String_StaticEnum()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_String();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_String, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("EVRDeviceProperty_String"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EVRDeviceProperty_String(EVRDeviceProperty_String_StaticEnum, TEXT("/Script/VRExpansionPlugin"), TEXT("EVRDeviceProperty_String"), false, nullptr, nullptr);
static class UEnum* EAsyncBlueprintResultSwitch_StaticEnum()
{
	extern VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EAsyncBlueprintResultSwitch();
		Singleton = GetStaticEnum(Z_Construct_UEnum_VRExpansionPlugin_EAsyncBlueprintResultSwitch, Z_Construct_UPackage__Script_VRExpansionPlugin(), TEXT("EAsyncBlueprintResultSwitch"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EAsyncBlueprintResultSwitch(EAsyncBlueprintResultSwitch_StaticEnum, TEXT("/Script/VRExpansionPlugin"), TEXT("EAsyncBlueprintResultSwitch"), false, nullptr, nullptr);
	void UVRExpansionFunctionLibrary::StaticRegisterNativesUVRExpansionFunctionLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UVRExpansionFunctionLibrary::StaticClass(), "CloseVRHandles",(Native)&UVRExpansionFunctionLibrary::execCloseVRHandles);
		FNativeFunctionRegistrar::RegisterFunction(UVRExpansionFunctionLibrary::StaticClass(), "GetHMDType",(Native)&UVRExpansionFunctionLibrary::execGetHMDType);
		FNativeFunctionRegistrar::RegisterFunction(UVRExpansionFunctionLibrary::StaticClass(), "GetIsHMDConnected",(Native)&UVRExpansionFunctionLibrary::execGetIsHMDConnected);
		FNativeFunctionRegistrar::RegisterFunction(UVRExpansionFunctionLibrary::StaticClass(), "GetVRControllerPropertyString",(Native)&UVRExpansionFunctionLibrary::execGetVRControllerPropertyString);
		FNativeFunctionRegistrar::RegisterFunction(UVRExpansionFunctionLibrary::StaticClass(), "GetVRDeviceModelAndTexture",(Native)&UVRExpansionFunctionLibrary::execGetVRDeviceModelAndTexture);
		FNativeFunctionRegistrar::RegisterFunction(UVRExpansionFunctionLibrary::StaticClass(), "GetVRDevicePropertyBool",(Native)&UVRExpansionFunctionLibrary::execGetVRDevicePropertyBool);
		FNativeFunctionRegistrar::RegisterFunction(UVRExpansionFunctionLibrary::StaticClass(), "GetVRDevicePropertyFloat",(Native)&UVRExpansionFunctionLibrary::execGetVRDevicePropertyFloat);
		FNativeFunctionRegistrar::RegisterFunction(UVRExpansionFunctionLibrary::StaticClass(), "GetVRDevicePropertyString",(Native)&UVRExpansionFunctionLibrary::execGetVRDevicePropertyString);
		FNativeFunctionRegistrar::RegisterFunction(UVRExpansionFunctionLibrary::StaticClass(), "OpenVRHandles",(Native)&UVRExpansionFunctionLibrary::execOpenVRHandles);
	}
	IMPLEMENT_CLASS(UVRExpansionFunctionLibrary, 3327244169);
	void UVRRootComponent::StaticRegisterNativesUVRRootComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UVRRootComponent::StaticClass(), "GetVRForwardVector",(Native)&UVRRootComponent::execGetVRForwardVector);
		FNativeFunctionRegistrar::RegisterFunction(UVRRootComponent::StaticClass(), "GetVRLocation",(Native)&UVRRootComponent::execGetVRLocation);
		FNativeFunctionRegistrar::RegisterFunction(UVRRootComponent::StaticClass(), "GetVRRightVector",(Native)&UVRRootComponent::execGetVRRightVector);
		FNativeFunctionRegistrar::RegisterFunction(UVRRootComponent::StaticClass(), "GetVRRotation",(Native)&UVRRootComponent::execGetVRRotation);
		FNativeFunctionRegistrar::RegisterFunction(UVRRootComponent::StaticClass(), "GetVRUpVector",(Native)&UVRRootComponent::execGetVRUpVector);
	}
	IMPLEMENT_CLASS(UVRRootComponent, 1839711059);
	void UVRCharacterMovementComponent::ServerMoveVR(float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, FVector_NetQuantize100 CapsuleLoc, FVector_NetQuantize100 LFDiff, uint8 CapsuleYaw, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)
	{
		VRCharacterMovementComponent_eventServerMoveVR_Parms Parms;
		Parms.TimeStamp=TimeStamp;
		Parms.InAccel=InAccel;
		Parms.ClientLoc=ClientLoc;
		Parms.CapsuleLoc=CapsuleLoc;
		Parms.LFDiff=LFDiff;
		Parms.CapsuleYaw=CapsuleYaw;
		Parms.CompressedMoveFlags=CompressedMoveFlags;
		Parms.ClientRoll=ClientRoll;
		Parms.View=View;
		Parms.ClientMovementBase=ClientMovementBase;
		Parms.ClientBaseBoneName=ClientBaseBoneName;
		Parms.ClientMovementMode=ClientMovementMode;
		ProcessEvent(FindFunctionChecked(VREXPANSIONPLUGIN_ServerMoveVR),&Parms);
	}
	void UVRCharacterMovementComponent::ServerMoveVRDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, FVector_NetQuantize100 OldCapsuleLoc, FVector_NetQuantize100 OldLFDiff, uint8 OldCapsuleYaw, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, FVector_NetQuantize100 CapsuleLoc, FVector_NetQuantize100 LFDiff, uint8 CapsuleYaw, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)
	{
		VRCharacterMovementComponent_eventServerMoveVRDual_Parms Parms;
		Parms.TimeStamp0=TimeStamp0;
		Parms.InAccel0=InAccel0;
		Parms.PendingFlags=PendingFlags;
		Parms.View0=View0;
		Parms.OldCapsuleLoc=OldCapsuleLoc;
		Parms.OldLFDiff=OldLFDiff;
		Parms.OldCapsuleYaw=OldCapsuleYaw;
		Parms.TimeStamp=TimeStamp;
		Parms.InAccel=InAccel;
		Parms.ClientLoc=ClientLoc;
		Parms.CapsuleLoc=CapsuleLoc;
		Parms.LFDiff=LFDiff;
		Parms.CapsuleYaw=CapsuleYaw;
		Parms.NewFlags=NewFlags;
		Parms.ClientRoll=ClientRoll;
		Parms.View=View;
		Parms.ClientMovementBase=ClientMovementBase;
		Parms.ClientBaseBoneName=ClientBaseBoneName;
		Parms.ClientMovementMode=ClientMovementMode;
		ProcessEvent(FindFunctionChecked(VREXPANSIONPLUGIN_ServerMoveVRDual),&Parms);
	}
	void UVRCharacterMovementComponent::ServerMoveVRDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, uint8 PendingFlags, uint32 View0, FVector_NetQuantize100 OldCapsuleLoc, FVector_NetQuantize100 OldLFDiff, uint8 OldCapsuleYaw, float TimeStamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, FVector_NetQuantize100 CapsuleLoc, FVector_NetQuantize100 LFDiff, uint8 CapsuleYaw, uint8 NewFlags, uint8 ClientRoll, uint32 View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, uint8 ClientMovementMode)
	{
		VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms Parms;
		Parms.TimeStamp0=TimeStamp0;
		Parms.InAccel0=InAccel0;
		Parms.PendingFlags=PendingFlags;
		Parms.View0=View0;
		Parms.OldCapsuleLoc=OldCapsuleLoc;
		Parms.OldLFDiff=OldLFDiff;
		Parms.OldCapsuleYaw=OldCapsuleYaw;
		Parms.TimeStamp=TimeStamp;
		Parms.InAccel=InAccel;
		Parms.ClientLoc=ClientLoc;
		Parms.CapsuleLoc=CapsuleLoc;
		Parms.LFDiff=LFDiff;
		Parms.CapsuleYaw=CapsuleYaw;
		Parms.NewFlags=NewFlags;
		Parms.ClientRoll=ClientRoll;
		Parms.View=View;
		Parms.ClientMovementBase=ClientMovementBase;
		Parms.ClientBaseBoneName=ClientBaseBoneName;
		Parms.ClientMovementMode=ClientMovementMode;
		ProcessEvent(FindFunctionChecked(VREXPANSIONPLUGIN_ServerMoveVRDualHybridRootMotion),&Parms);
	}
	void UVRCharacterMovementComponent::StaticRegisterNativesUVRCharacterMovementComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UVRCharacterMovementComponent::StaticClass(), "ServerMoveVR",(Native)&UVRCharacterMovementComponent::execServerMoveVR);
		FNativeFunctionRegistrar::RegisterFunction(UVRCharacterMovementComponent::StaticClass(), "ServerMoveVRDual",(Native)&UVRCharacterMovementComponent::execServerMoveVRDual);
		FNativeFunctionRegistrar::RegisterFunction(UVRCharacterMovementComponent::StaticClass(), "ServerMoveVRDualHybridRootMotion",(Native)&UVRCharacterMovementComponent::execServerMoveVRDualHybridRootMotion);
	}
	IMPLEMENT_CLASS(UVRCharacterMovementComponent, 4010138572);
	void AVRCharacter::NotifyOfTeleport()
	{
		ProcessEvent(FindFunctionChecked(VREXPANSIONPLUGIN_NotifyOfTeleport),NULL);
	}
	void AVRCharacter::StaticRegisterNativesAVRCharacter()
	{
		FNativeFunctionRegistrar::RegisterFunction(AVRCharacter::StaticClass(), "GetTeleportLocation",(Native)&AVRCharacter::execGetTeleportLocation);
		FNativeFunctionRegistrar::RegisterFunction(AVRCharacter::StaticClass(), "NotifyOfTeleport",(Native)&AVRCharacter::execNotifyOfTeleport);
	}
	IMPLEMENT_CLASS(AVRCharacter, 488137874);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize100();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent();
	HEADMOUNTEDDISPLAY_API class UEnum* Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus();
	INPUTCORE_API class UEnum* Z_Construct_UEnum_InputCore_EControllerHand();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	PROCEDURALMESHCOMPONENT_API class UClass* Z_Construct_UClass_UProceduralMeshComponent_NoRegister();
	STEAMVR_API class UEnum* Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantize10();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();

	VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EBPHMDDeviceType();
	VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType();
	VREXPANSIONPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FBPActorPhysicsHandleInformation();
	VREXPANSIONPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FBPActorGripInformation();
	VREXPANSIONPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FBPVRComponentPosRep();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_AddSecondaryAttachmentPoint();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_ConvertToControllerRelativeTransform();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_DropActor();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_DropComponent();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_DropGrip();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_GetGrippedActors();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_GetPhysicsVelocities();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_GripActor();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_GripComponent();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_IsTracked();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_NotifyDrop();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_OnRep_GrippedActors();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_OnRep_ReplicatedControllerTransform();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_PostTeleportMoveGrippedActors();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_RemoveSecondaryAttachmentPoint();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_Server_SendControllerTransform();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrip();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrippedActor();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrippedComponent();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UGripMotionControllerComponent_NoRegister();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UGripMotionControllerComponent();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UParentRelativeAttachmentComponent_NoRegister();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UParentRelativeAttachmentComponent();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UReplicatedVRCameraComponent_OnRep_ReplicatedTransform();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UReplicatedVRCameraComponent_Server_SendTransform();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UReplicatedVRCameraComponent_NoRegister();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UReplicatedVRCameraComponent();
	VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRControllerProperty_String();
	VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Float();
	VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Bool();
	VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_String();
	VREXPANSIONPLUGIN_API class UEnum* Z_Construct_UEnum_VRExpansionPlugin_EAsyncBlueprintResultSwitch();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_CloseVRHandles();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetHMDType();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetIsHMDConnected();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRControllerPropertyString();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDeviceModelAndTexture();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyBool();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyFloat();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyString();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_OpenVRHandles();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UVRExpansionFunctionLibrary_NoRegister();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UVRExpansionFunctionLibrary();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRForwardVector();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRLocation();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRRightVector();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRRotation();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRUpVector();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UVRRootComponent_NoRegister();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UVRRootComponent();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVR();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVRDual();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVRDualHybridRootMotion();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UVRCharacterMovementComponent_NoRegister();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_UVRCharacterMovementComponent();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_AVRCharacter_GetTeleportLocation();
	VREXPANSIONPLUGIN_API class UFunction* Z_Construct_UFunction_AVRCharacter_NotifyOfTeleport();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_AVRCharacter_NoRegister();
	VREXPANSIONPLUGIN_API class UClass* Z_Construct_UClass_AVRCharacter();
	VREXPANSIONPLUGIN_API class UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin();
	UEnum* Z_Construct_UEnum_VRExpansionPlugin_EBPHMDDeviceType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EBPHMDDeviceType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EBPHMDDeviceType"), 0, Get_Z_Construct_UEnum_VRExpansionPlugin_EBPHMDDeviceType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBPHMDDeviceType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DT_OculusRift")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DT_Morpheus")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DT_ES2GenericStereoMesh")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DT_SteamVR")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DT_GearVR")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DT_Unknown")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("DT_MAX")), 6));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EBPHMDDeviceType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("IsBlueprintBase"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("This needs to be updated as the original gets changed, that or hope they make the original blueprint accessible."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EBPHMDDeviceType_CRC() { return 157800424U; }
	UEnum* Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EGripCollisionType"), 0, Get_Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGripCollisionType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("InteractiveCollisionWithPhysics")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("InteractiveCollisionWithSweep")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("InteractiveHybridCollisionWithSweep")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("SweepWithPhysics")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PhysicsOnly")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGripCollisionType_MAX")), 5));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EGripCollisionType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("IsBlueprintBase"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Interactive Collision With Physics = Held items can be offset by geometry, uses physics for the offset, pushes physics simulating objects with weight taken into account\nInteractive Collision With Sweep = Held items can be offset by geometry, uses sweep for the offset, pushes physics simulating objects, no weight\nSweep With Physics = Only sweeps movement, will not be offset by geomtry, still pushes physics simulating objects, no weight\nPhysics Only = Does not sweep at all (does not trigger OnHitEvents), still pushes physics simulating objects, no weight"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType_CRC() { return 3942089751U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBPActorPhysicsHandleInformation()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FBPActorPhysicsHandleInformation_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("BPActorPhysicsHandleInformation"), sizeof(FBPActorPhysicsHandleInformation), Get_Z_Construct_UScriptStruct_FBPActorPhysicsHandleInformation_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BPActorPhysicsHandleInformation"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBPActorPhysicsHandleInformation>, EStructFlags(0x00000205));
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Component"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Component, FBPActorPhysicsHandleInformation), 0x001000000008001c, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, FBPActorPhysicsHandleInformation), 0x0010000000000014, Z_Construct_UClass_AActor_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("Category"), TEXT("VRExpansionLibrary"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_Component, TEXT("Category"), TEXT("BPActorPhysicsHandleInformation"));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Component, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_Actor, TEXT("Category"), TEXT("BPActorPhysicsHandleInformation"));
			MetaData->SetValue(NewProp_Actor, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBPActorPhysicsHandleInformation_CRC() { return 3182591169U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBPActorGripInformation()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FBPActorGripInformation_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("BPActorGripInformation"), sizeof(FBPActorGripInformation), Get_Z_Construct_UScriptStruct_FBPActorGripInformation_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BPActorGripInformation"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBPActorGripInformation>, EStructFlags(0x00000205));
			UProperty* NewProp_SecondaryRelativeTransform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SecondaryRelativeTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SecondaryRelativeTransform, FBPActorGripInformation), 0x0010000000000000, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_SecondaryAttachment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SecondaryAttachment"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SecondaryAttachment, FBPActorGripInformation), 0x001000000008001c, Z_Construct_UClass_USceneComponent_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHasSecondaryAttachment, FBPActorGripInformation, bool);
			UProperty* NewProp_bHasSecondaryAttachment = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bHasSecondaryAttachment"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHasSecondaryAttachment, FBPActorGripInformation), 0x0010000000000014, CPP_BOOL_PROPERTY_BITMASK(bHasSecondaryAttachment, FBPActorGripInformation), sizeof(bool), true);
			UProperty* NewProp_Stiffness = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Stiffness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Stiffness, FBPActorGripInformation), 0x0010000000000014);
			UProperty* NewProp_Damping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Damping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Damping, FBPActorGripInformation), 0x0010000000000014);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTurnOffLateUpdateWhenColliding, FBPActorGripInformation, bool);
			UProperty* NewProp_bTurnOffLateUpdateWhenColliding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bTurnOffLateUpdateWhenColliding"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTurnOffLateUpdateWhenColliding, FBPActorGripInformation), 0x0010000000000014, CPP_BOOL_PROPERTY_BITMASK(bTurnOffLateUpdateWhenColliding, FBPActorGripInformation), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bOriginalReplicatesMovement, FBPActorGripInformation, bool);
			UProperty* NewProp_bOriginalReplicatesMovement = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bOriginalReplicatesMovement"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bOriginalReplicatesMovement, FBPActorGripInformation), 0x0010000000000014, CPP_BOOL_PROPERTY_BITMASK(bOriginalReplicatesMovement, FBPActorGripInformation), sizeof(bool), true);
			UProperty* NewProp_RelativeTransform = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RelativeTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(RelativeTransform, FBPActorGripInformation), 0x0010000000000014, Z_Construct_UScriptStruct_FTransform());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bColliding, FBPActorGripInformation, bool);
			UProperty* NewProp_bColliding = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bColliding"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bColliding, FBPActorGripInformation), 0x0010000000000014, CPP_BOOL_PROPERTY_BITMASK(bColliding, FBPActorGripInformation), sizeof(bool), true);
			UProperty* NewProp_GripCollisionType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GripCollisionType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(GripCollisionType, FBPActorGripInformation), 0x0010000000000014, Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType());
			UProperty* NewProp_Component = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Component"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Component, FBPActorGripInformation), 0x001000000008001c, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_Actor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Actor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Actor, FBPActorGripInformation), 0x0010000000000014, Z_Construct_UClass_AActor_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("Category"), TEXT("VRExpansionLibrary"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_SecondaryRelativeTransform, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_SecondaryAttachment, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_SecondaryAttachment, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_SecondaryAttachment, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_bHasSecondaryAttachment, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_bHasSecondaryAttachment, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_bHasSecondaryAttachment, TEXT("ToolTip"), TEXT("For multi grip situations"));
			MetaData->SetValue(NewProp_Stiffness, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_Stiffness, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_Damping, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_Damping, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_bTurnOffLateUpdateWhenColliding, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_bTurnOffLateUpdateWhenColliding, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_bOriginalReplicatesMovement, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_bOriginalReplicatesMovement, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_RelativeTransform, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_RelativeTransform, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_bColliding, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_bColliding, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_GripCollisionType, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_GripCollisionType, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_Component, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_Component, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Component, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_Actor, TEXT("Category"), TEXT("BPActorGripInformation"));
			MetaData->SetValue(NewProp_Actor, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBPActorGripInformation_CRC() { return 2286896162U; }
	UScriptStruct* Z_Construct_UScriptStruct_FBPVRComponentPosRep()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FBPVRComponentPosRep_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("BPVRComponentPosRep"), sizeof(FBPVRComponentPosRep), Get_Z_Construct_UScriptStruct_FBPVRComponentPosRep_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BPVRComponentPosRep"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FBPVRComponentPosRep>, EStructFlags(0x00000201));
			UProperty* NewProp_RollBYTE = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RollBYTE"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RollBYTE, FBPVRComponentPosRep), 0x0010000000000000);
			UProperty* NewProp_YawPitchINT = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("YawPitchINT"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(YawPitchINT, FBPVRComponentPosRep), 0x0010000000000000);
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Position, FBPVRComponentPosRep), 0x0010000000000000, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_RollBYTE, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_YawPitchINT, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
			MetaData->SetValue(NewProp_Position, TEXT("ModuleRelativePath"), TEXT("Public/VRBPDatatypes.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FBPVRComponentPosRep_CRC() { return 1913323580U; }
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_AddSecondaryAttachmentPoint()
	{
		struct GripMotionControllerComponent_eventAddSecondaryAttachmentPoint_Parms
		{
			AActor* GrippedActorToAddAttachment;
			USceneComponent* SecondaryPointComponent;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddSecondaryAttachmentPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GripMotionControllerComponent_eventAddSecondaryAttachmentPoint_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventAddSecondaryAttachmentPoint_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventAddSecondaryAttachmentPoint_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventAddSecondaryAttachmentPoint_Parms), sizeof(bool), true);
			UProperty* NewProp_SecondaryPointComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SecondaryPointComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SecondaryPointComponent, GripMotionControllerComponent_eventAddSecondaryAttachmentPoint_Parms), 0x0010000000080080, Z_Construct_UClass_USceneComponent_NoRegister());
			UProperty* NewProp_GrippedActorToAddAttachment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GrippedActorToAddAttachment"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GrippedActorToAddAttachment, GripMotionControllerComponent_eventAddSecondaryAttachmentPoint_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds a secondary attachment point to the grip"));
			MetaData->SetValue(NewProp_SecondaryPointComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_ConvertToControllerRelativeTransform()
	{
		struct GripMotionControllerComponent_eventConvertToControllerRelativeTransform_Parms
		{
			FTransform InTransform;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ConvertToControllerRelativeTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(GripMotionControllerComponent_eventConvertToControllerRelativeTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, GripMotionControllerComponent_eventConvertToControllerRelativeTransform_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_InTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InTransform, GripMotionControllerComponent_eventConvertToControllerRelativeTransform_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FTransform());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a worldspace transform into being relative to this motion controller"));
			MetaData->SetValue(NewProp_InTransform, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_DropActor()
	{
		struct GripMotionControllerComponent_eventDropActor_Parms
		{
			AActor* ActorToDrop;
			bool bSimulate;
			FVector OptionalAngularVelocity;
			FVector OptionalLinearVelocity;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DropActor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(GripMotionControllerComponent_eventDropActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventDropActor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventDropActor_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventDropActor_Parms), sizeof(bool), true);
			UProperty* NewProp_OptionalLinearVelocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalLinearVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OptionalLinearVelocity, GripMotionControllerComponent_eventDropActor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OptionalAngularVelocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalAngularVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OptionalAngularVelocity, GripMotionControllerComponent_eventDropActor_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSimulate, GripMotionControllerComponent_eventDropActor_Parms, bool);
			UProperty* NewProp_bSimulate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSimulate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSimulate, GripMotionControllerComponent_eventDropActor_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bSimulate, GripMotionControllerComponent_eventDropActor_Parms), sizeof(bool), true);
			UProperty* NewProp_ActorToDrop = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorToDrop"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActorToDrop, GripMotionControllerComponent_eventDropActor_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Drop a gripped actor"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_DropComponent()
	{
		struct GripMotionControllerComponent_eventDropComponent_Parms
		{
			UPrimitiveComponent* ComponentToDrop;
			bool bSimulate;
			FVector OptionalAngularVelocity;
			FVector OptionalLinearVelocity;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DropComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(GripMotionControllerComponent_eventDropComponent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventDropComponent_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventDropComponent_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventDropComponent_Parms), sizeof(bool), true);
			UProperty* NewProp_OptionalLinearVelocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalLinearVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OptionalLinearVelocity, GripMotionControllerComponent_eventDropComponent_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OptionalAngularVelocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalAngularVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OptionalAngularVelocity, GripMotionControllerComponent_eventDropComponent_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSimulate, GripMotionControllerComponent_eventDropComponent_Parms, bool);
			UProperty* NewProp_bSimulate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSimulate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSimulate, GripMotionControllerComponent_eventDropComponent_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bSimulate, GripMotionControllerComponent_eventDropComponent_Parms), sizeof(bool), true);
			UProperty* NewProp_ComponentToDrop = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentToDrop"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ComponentToDrop, GripMotionControllerComponent_eventDropComponent_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Drop a gripped component"));
			MetaData->SetValue(NewProp_ComponentToDrop, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_DropGrip()
	{
		struct GripMotionControllerComponent_eventDropGrip_Parms
		{
			FBPActorGripInformation Grip;
			bool bSimulate;
			FVector OptionalAngularVelocity;
			FVector OptionalLinearVelocity;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DropGrip"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(GripMotionControllerComponent_eventDropGrip_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventDropGrip_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventDropGrip_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventDropGrip_Parms), sizeof(bool), true);
			UProperty* NewProp_OptionalLinearVelocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalLinearVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OptionalLinearVelocity, GripMotionControllerComponent_eventDropGrip_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OptionalAngularVelocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalAngularVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OptionalAngularVelocity, GripMotionControllerComponent_eventDropGrip_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSimulate, GripMotionControllerComponent_eventDropGrip_Parms, bool);
			UProperty* NewProp_bSimulate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSimulate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSimulate, GripMotionControllerComponent_eventDropGrip_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bSimulate, GripMotionControllerComponent_eventDropGrip_Parms), sizeof(bool), true);
			UProperty* NewProp_Grip = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Grip"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Grip, GripMotionControllerComponent_eventDropGrip_Parms), 0x0010008008000182, Z_Construct_UScriptStruct_FBPActorGripInformation());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Master function for dropping a grip"));
			MetaData->SetValue(NewProp_Grip, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_GetGrippedActors()
	{
		struct GripMotionControllerComponent_eventGetGrippedActors_Parms
		{
			TArray<AActor*> GrippedActorsArray;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGrippedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(GripMotionControllerComponent_eventGetGrippedActors_Parms));
			UProperty* NewProp_GrippedActorsArray = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GrippedActorsArray"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(GrippedActorsArray, GripMotionControllerComponent_eventGetGrippedActors_Parms), 0x0010000000000180);
			UProperty* NewProp_GrippedActorsArray_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GrippedActorsArray, TEXT("GrippedActorsArray"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get list of all gripped actors"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_GetPhysicsVelocities()
	{
		struct GripMotionControllerComponent_eventGetPhysicsVelocities_Parms
		{
			FBPActorGripInformation Grip;
			FVector AngularVelocity;
			FVector LinearVelocity;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPhysicsVelocities"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14C20401, 65535, sizeof(GripMotionControllerComponent_eventGetPhysicsVelocities_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventGetPhysicsVelocities_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventGetPhysicsVelocities_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventGetPhysicsVelocities_Parms), sizeof(bool), true);
			UProperty* NewProp_LinearVelocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LinearVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LinearVelocity, GripMotionControllerComponent_eventGetPhysicsVelocities_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_AngularVelocity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("AngularVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(AngularVelocity, GripMotionControllerComponent_eventGetPhysicsVelocities_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Grip = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Grip"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Grip, GripMotionControllerComponent_eventGetPhysicsVelocities_Parms), 0x0010008008000182, Z_Construct_UScriptStruct_FBPActorGripInformation());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(NewProp_Grip, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_GripActor()
	{
		struct GripMotionControllerComponent_eventGripActor_Parms
		{
			AActor* ActorToGrip;
			FTransform WorldOffset;
			bool bWorldOffsetIsRelative;
			FName OptionalSnapToSocketName;
			TEnumAsByte<EGripCollisionType> GripCollisionType;
			float GripStiffness;
			float GripDamping;
			bool bTurnOffLateUpdateWhenColliding;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GripActor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(GripMotionControllerComponent_eventGripActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventGripActor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventGripActor_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventGripActor_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTurnOffLateUpdateWhenColliding, GripMotionControllerComponent_eventGripActor_Parms, bool);
			UProperty* NewProp_bTurnOffLateUpdateWhenColliding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTurnOffLateUpdateWhenColliding"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTurnOffLateUpdateWhenColliding, GripMotionControllerComponent_eventGripActor_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bTurnOffLateUpdateWhenColliding, GripMotionControllerComponent_eventGripActor_Parms), sizeof(bool), true);
			UProperty* NewProp_GripDamping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GripDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GripDamping, GripMotionControllerComponent_eventGripActor_Parms), 0x0010000000000080);
			UProperty* NewProp_GripStiffness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GripStiffness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GripStiffness, GripMotionControllerComponent_eventGripActor_Parms), 0x0010000000000080);
			UProperty* NewProp_GripCollisionType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GripCollisionType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(GripCollisionType, GripMotionControllerComponent_eventGripActor_Parms), 0x0010000000000080, Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType());
			UProperty* NewProp_OptionalSnapToSocketName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalSnapToSocketName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(OptionalSnapToSocketName, GripMotionControllerComponent_eventGripActor_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWorldOffsetIsRelative, GripMotionControllerComponent_eventGripActor_Parms, bool);
			UProperty* NewProp_bWorldOffsetIsRelative = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bWorldOffsetIsRelative"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWorldOffsetIsRelative, GripMotionControllerComponent_eventGripActor_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bWorldOffsetIsRelative, GripMotionControllerComponent_eventGripActor_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldOffset, GripMotionControllerComponent_eventGripActor_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_ActorToGrip = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ActorToGrip"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActorToGrip, GripMotionControllerComponent_eventGripActor_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bTurnOffLateUpdateWhenColliding"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bWorldOffsetIsRelative"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GripCollisionType"), TEXT("InteractiveCollisionWithPhysics"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GripDamping"), TEXT("200.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GripStiffness"), TEXT("1500.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_OptionalSnapToSocketName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Grip an actor, these are stored in a Tarray that will prevent destruction of the object, you MUST ungrip an actor if you want to kill it\n         The WorldOffset is the transform that it will remain away from the controller, if you use the world position of the actor then it will grab\n         at the point of intersection.\n\n         If WorldOffsetIsRelative is true then it will not convert the transform from world space but will instead use that offset directly.\n         You could pass in a socket relative transform with this set for snapping or an empty transform to snap the object at its 0,0,0 point.\n\n         If you declare a valid OptionSnapToSocketName then it will instead snap the actor to the relative offset\n         location that the socket is to its parent actor."));
			MetaData->SetValue(NewProp_WorldOffset, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_GripComponent()
	{
		struct GripMotionControllerComponent_eventGripComponent_Parms
		{
			UPrimitiveComponent* ComponentToGrip;
			FTransform WorldOffset;
			bool bWorldOffsetIsRelative;
			FName OptionalSnapToSocketName;
			TEnumAsByte<EGripCollisionType> GripCollisionType;
			float GripStiffness;
			float GripDamping;
			bool bTurnOffLateUpdateWhenColliding;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GripComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(GripMotionControllerComponent_eventGripComponent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventGripComponent_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventGripComponent_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventGripComponent_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTurnOffLateUpdateWhenColliding, GripMotionControllerComponent_eventGripComponent_Parms, bool);
			UProperty* NewProp_bTurnOffLateUpdateWhenColliding = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bTurnOffLateUpdateWhenColliding"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTurnOffLateUpdateWhenColliding, GripMotionControllerComponent_eventGripComponent_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bTurnOffLateUpdateWhenColliding, GripMotionControllerComponent_eventGripComponent_Parms), sizeof(bool), true);
			UProperty* NewProp_GripDamping = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GripDamping"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GripDamping, GripMotionControllerComponent_eventGripComponent_Parms), 0x0010000000000080);
			UProperty* NewProp_GripStiffness = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GripStiffness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GripStiffness, GripMotionControllerComponent_eventGripComponent_Parms), 0x0010000000000080);
			UProperty* NewProp_GripCollisionType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GripCollisionType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(GripCollisionType, GripMotionControllerComponent_eventGripComponent_Parms), 0x0010000000000080, Z_Construct_UEnum_VRExpansionPlugin_EGripCollisionType());
			UProperty* NewProp_OptionalSnapToSocketName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OptionalSnapToSocketName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(OptionalSnapToSocketName, GripMotionControllerComponent_eventGripComponent_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWorldOffsetIsRelative, GripMotionControllerComponent_eventGripComponent_Parms, bool);
			UProperty* NewProp_bWorldOffsetIsRelative = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bWorldOffsetIsRelative"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWorldOffsetIsRelative, GripMotionControllerComponent_eventGripComponent_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bWorldOffsetIsRelative, GripMotionControllerComponent_eventGripComponent_Parms), sizeof(bool), true);
			UProperty* NewProp_WorldOffset = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(WorldOffset, GripMotionControllerComponent_eventGripComponent_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_ComponentToGrip = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentToGrip"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ComponentToGrip, GripMotionControllerComponent_eventGripComponent_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bTurnOffLateUpdateWhenColliding"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bWorldOffsetIsRelative"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GripCollisionType"), TEXT("InteractiveCollisionWithPhysics"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GripDamping"), TEXT("200.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_GripStiffness"), TEXT("1500.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_OptionalSnapToSocketName"), TEXT("None"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Grip a component"));
			MetaData->SetValue(NewProp_WorldOffset, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_ComponentToGrip, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_IsTracked()
	{
		struct GripMotionControllerComponent_eventIsTracked_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsTracked"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(GripMotionControllerComponent_eventIsTracked_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventIsTracked_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventIsTracked_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventIsTracked_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MotionController"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Whether or not this component had a valid tracked device this frame"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_NotifyDrop()
	{
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotifyDrop"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00024CC0, 65535, sizeof(GripMotionControllerComponent_eventNotifyDrop_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSimulate, GripMotionControllerComponent_eventNotifyDrop_Parms, bool);
			UProperty* NewProp_bSimulate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSimulate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSimulate, GripMotionControllerComponent_eventNotifyDrop_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bSimulate, GripMotionControllerComponent_eventNotifyDrop_Parms), sizeof(bool), true);
			UProperty* NewProp_NewDrop = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewDrop"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NewDrop, GripMotionControllerComponent_eventNotifyDrop_Parms), 0x0010008008000082, Z_Construct_UScriptStruct_FBPActorGripInformation());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(NewProp_NewDrop, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_OnRep_GrippedActors()
	{
		struct GripMotionControllerComponent_eventOnRep_GrippedActors_Parms
		{
			TArray<FBPActorGripInformation> OriginalArrayState;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_GrippedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535, sizeof(GripMotionControllerComponent_eventOnRep_GrippedActors_Parms));
			UProperty* NewProp_OriginalArrayState = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OriginalArrayState"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OriginalArrayState, GripMotionControllerComponent_eventOnRep_GrippedActors_Parms), 0x0010008000000080);
			UProperty* NewProp_OriginalArrayState_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OriginalArrayState, TEXT("OriginalArrayState"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FBPActorGripInformation());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_OnRep_ReplicatedControllerTransform()
	{
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_ReplicatedControllerTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_PostTeleportMoveGrippedActors()
	{
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PostTeleportMoveGrippedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("After teleporting a pawn you NEED to call this, otherwise gripped objects will travel with a sweeped move and can get caught on geometry"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_RemoveSecondaryAttachmentPoint()
	{
		struct GripMotionControllerComponent_eventRemoveSecondaryAttachmentPoint_Parms
		{
			AActor* GrippedActorToRemoveAttachment;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RemoveSecondaryAttachmentPoint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GripMotionControllerComponent_eventRemoveSecondaryAttachmentPoint_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventRemoveSecondaryAttachmentPoint_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventRemoveSecondaryAttachmentPoint_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventRemoveSecondaryAttachmentPoint_Parms), sizeof(bool), true);
			UProperty* NewProp_GrippedActorToRemoveAttachment = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GrippedActorToRemoveAttachment"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GrippedActorToRemoveAttachment, GripMotionControllerComponent_eventRemoveSecondaryAttachmentPoint_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Adds a secondary attachment point to the grip"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_Server_SendControllerTransform()
	{
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Server_SendControllerTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x80220C40, 65535, sizeof(GripMotionControllerComponent_eventServer_SendControllerTransform_Parms));
			UProperty* NewProp_NewTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NewTransform, GripMotionControllerComponent_eventServer_SendControllerTransform_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FBPVRComponentPosRep());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("I'm sending it unreliable because it is being resent pretty often"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrip()
	{
		struct GripMotionControllerComponent_eventTeleportMoveGrip_Parms
		{
			FBPActorGripInformation Grip;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TeleportMoveGrip"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(GripMotionControllerComponent_eventTeleportMoveGrip_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventTeleportMoveGrip_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventTeleportMoveGrip_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventTeleportMoveGrip_Parms), sizeof(bool), true);
			UProperty* NewProp_Grip = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Grip"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Grip, GripMotionControllerComponent_eventTeleportMoveGrip_Parms), 0x0010008008000182, Z_Construct_UScriptStruct_FBPActorGripInformation());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(NewProp_Grip, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrippedActor()
	{
		struct GripMotionControllerComponent_eventTeleportMoveGrippedActor_Parms
		{
			AActor* GrippedActorToMove;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TeleportMoveGrippedActor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GripMotionControllerComponent_eventTeleportMoveGrippedActor_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventTeleportMoveGrippedActor_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventTeleportMoveGrippedActor_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventTeleportMoveGrippedActor_Parms), sizeof(bool), true);
			UProperty* NewProp_GrippedActorToMove = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("GrippedActorToMove"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GrippedActorToMove, GripMotionControllerComponent_eventTeleportMoveGrippedActor_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Move a single gripped item back into position ignoring collision in the way"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrippedComponent()
	{
		struct GripMotionControllerComponent_eventTeleportMoveGrippedComponent_Parms
		{
			UPrimitiveComponent* ComponentToMove;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UGripMotionControllerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TeleportMoveGrippedComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(GripMotionControllerComponent_eventTeleportMoveGrippedComponent_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, GripMotionControllerComponent_eventTeleportMoveGrippedComponent_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, GripMotionControllerComponent_eventTeleportMoveGrippedComponent_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, GripMotionControllerComponent_eventTeleportMoveGrippedComponent_Parms), sizeof(bool), true);
			UProperty* NewProp_ComponentToMove = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ComponentToMove"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ComponentToMove, GripMotionControllerComponent_eventTeleportMoveGrippedComponent_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Move a single gripped item back into position ignoring collision in the way"));
			MetaData->SetValue(NewProp_ComponentToMove, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGripMotionControllerComponent_NoRegister()
	{
		return UGripMotionControllerComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UGripMotionControllerComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UPrimitiveComponent();
			Z_Construct_UPackage__Script_VRExpansionPlugin();
			OuterClass = UGripMotionControllerComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_AddSecondaryAttachmentPoint());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_ConvertToControllerRelativeTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_DropActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_DropComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_DropGrip());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_GetGrippedActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_GetPhysicsVelocities());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_GripActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_GripComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_IsTracked());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_NotifyDrop());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_OnRep_GrippedActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_OnRep_ReplicatedControllerTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_PostTeleportMoveGrippedActors());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_RemoveSecondaryAttachmentPoint());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_Server_SendControllerTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrip());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrippedActor());
				OuterClass->LinkChild(Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrippedComponent());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseWithoutTracking, UGripMotionControllerComponent, bool);
				UProperty* NewProp_bUseWithoutTracking = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseWithoutTracking"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseWithoutTracking, UGripMotionControllerComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bUseWithoutTracking, UGripMotionControllerComponent), sizeof(bool), true);
				UProperty* NewProp_ControllerNetUpdateRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ControllerNetUpdateRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ControllerNetUpdateRate, UGripMotionControllerComponent), 0x0010000000000025);
				UProperty* NewProp_ReplicatedControllerTransform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReplicatedControllerTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReplicatedControllerTransform, UGripMotionControllerComponent), 0x0010000100000034, Z_Construct_UScriptStruct_FBPVRComponentPosRep());
				NewProp_ReplicatedControllerTransform->RepNotifyFunc = FName(TEXT("OnRep_ReplicatedControllerTransform"));
				UProperty* NewProp_AdditionalLateUpdateComponents = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditionalLateUpdateComponents"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(AdditionalLateUpdateComponents, UGripMotionControllerComponent), 0x001000800000000c);
				UProperty* NewProp_AdditionalLateUpdateComponents_Inner = new(EC_InternalUseOnlyConstructor, NewProp_AdditionalLateUpdateComponents, TEXT("AdditionalLateUpdateComponents"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080008, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
				UProperty* NewProp_GrippedActors = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrippedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(GrippedActors, UGripMotionControllerComponent), 0x0010008100000034);
				NewProp_GrippedActors->RepNotifyFunc = FName(TEXT("OnRep_GrippedActors"));
				UProperty* NewProp_GrippedActors_Inner = new(EC_InternalUseOnlyConstructor, NewProp_GrippedActors, TEXT("GrippedActors"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000008000000000, Z_Construct_UScriptStruct_FBPActorGripInformation());
				UProperty* NewProp_CurrentTrackingStatus = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentTrackingStatus"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CurrentTrackingStatus, UGripMotionControllerComponent), 0x0010000000000014, Z_Construct_UEnum_HeadMountedDisplay_ETrackingStatus());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bDisableLowLatencyUpdate, UGripMotionControllerComponent, uint8);
				UProperty* NewProp_bDisableLowLatencyUpdate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bDisableLowLatencyUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bDisableLowLatencyUpdate, UGripMotionControllerComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bDisableLowLatencyUpdate, UGripMotionControllerComponent), sizeof(uint8), false);
				UProperty* NewProp_Hand = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Hand"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Hand, UGripMotionControllerComponent), 0x0010000000000005, Z_Construct_UEnum_InputCore_EControllerHand());
				UProperty* NewProp_PlayerIndex = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlayerIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(PlayerIndex, UGripMotionControllerComponent), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_AddSecondaryAttachmentPoint(), "AddSecondaryAttachmentPoint"); // 1322426290
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_ConvertToControllerRelativeTransform(), "ConvertToControllerRelativeTransform"); // 1378460242
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_DropActor(), "DropActor"); // 2935416618
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_DropComponent(), "DropComponent"); // 2522045415
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_DropGrip(), "DropGrip"); // 2144538335
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_GetGrippedActors(), "GetGrippedActors"); // 165937759
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_GetPhysicsVelocities(), "GetPhysicsVelocities"); // 4035706564
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_GripActor(), "GripActor"); // 1979047726
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_GripComponent(), "GripComponent"); // 1445110455
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_IsTracked(), "IsTracked"); // 1675797175
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_NotifyDrop(), "NotifyDrop"); // 3683154930
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_OnRep_GrippedActors(), "OnRep_GrippedActors"); // 1569720650
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_OnRep_ReplicatedControllerTransform(), "OnRep_ReplicatedControllerTransform"); // 2063881313
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_PostTeleportMoveGrippedActors(), "PostTeleportMoveGrippedActors"); // 1247750312
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_RemoveSecondaryAttachmentPoint(), "RemoveSecondaryAttachmentPoint"); // 2827554674
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_Server_SendControllerTransform(), "Server_SendControllerTransform"); // 1897666591
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrip(), "TeleportMoveGrip"); // 1928195925
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrippedActor(), "TeleportMoveGrippedActor"); // 80106377
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UGripMotionControllerComponent_TeleportMoveGrippedComponent(), "TeleportMoveGrippedComponent"); // 653867098
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("MotionController"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Mobility Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GripMotionControllerComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_bUseWithoutTracking, TEXT("Category"), TEXT("VRGrip"));
				MetaData->SetValue(NewProp_bUseWithoutTracking, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_bUseWithoutTracking, TEXT("ToolTip"), TEXT("This is for testing, setting it to true allows you to test grip with a non VR enabled pawn"));
				MetaData->SetValue(NewProp_ControllerNetUpdateRate, TEXT("Category"), TEXT("VRGrip"));
				MetaData->SetValue(NewProp_ControllerNetUpdateRate, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ControllerNetUpdateRate, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_ControllerNetUpdateRate, TEXT("ToolTip"), TEXT("Rate to update the position to the server, 100htz is default (same as replication rate, should also hit every tick)."));
				MetaData->SetValue(NewProp_ControllerNetUpdateRate, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_ReplicatedControllerTransform, TEXT("Category"), TEXT("VRGrip"));
				MetaData->SetValue(NewProp_ReplicatedControllerTransform, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_ReplicatedControllerTransform, TEXT("ToolTip"), TEXT("Movement Replication\nActor needs to be replicated for this to work"));
				MetaData->SetValue(NewProp_AdditionalLateUpdateComponents, TEXT("Category"), TEXT("VRGrip"));
				MetaData->SetValue(NewProp_AdditionalLateUpdateComponents, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AdditionalLateUpdateComponents, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_GrippedActors, TEXT("Category"), TEXT("VRGrip"));
				MetaData->SetValue(NewProp_GrippedActors, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_CurrentTrackingStatus, TEXT("Category"), TEXT("MotionController"));
				MetaData->SetValue(NewProp_CurrentTrackingStatus, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_CurrentTrackingStatus, TEXT("ToolTip"), TEXT("The tracking status for the device (e.g. full tracking, inertial tracking only, no tracking)"));
				MetaData->SetValue(NewProp_bDisableLowLatencyUpdate, TEXT("Category"), TEXT("MotionController"));
				MetaData->SetValue(NewProp_bDisableLowLatencyUpdate, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_bDisableLowLatencyUpdate, TEXT("ToolTip"), TEXT("If false, render transforms within the motion controller hierarchy will be updated a second time immediately before rendering."));
				MetaData->SetValue(NewProp_Hand, TEXT("Category"), TEXT("MotionController"));
				MetaData->SetValue(NewProp_Hand, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_Hand, TEXT("ToolTip"), TEXT("Which hand this component should automatically follow"));
				MetaData->SetValue(NewProp_PlayerIndex, TEXT("Category"), TEXT("MotionController"));
				MetaData->SetValue(NewProp_PlayerIndex, TEXT("ModuleRelativePath"), TEXT("Public/GripMotionControllerComponent.h"));
				MetaData->SetValue(NewProp_PlayerIndex, TEXT("ToolTip"), TEXT("Which player index this motion controller should automatically follow"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGripMotionControllerComponent(Z_Construct_UClass_UGripMotionControllerComponent, &UGripMotionControllerComponent::StaticClass, TEXT("UGripMotionControllerComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UGripMotionControllerComponent);
	UClass* Z_Construct_UClass_UParentRelativeAttachmentComponent_NoRegister()
	{
		return UParentRelativeAttachmentComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UParentRelativeAttachmentComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USceneComponent();
			Z_Construct_UPackage__Script_VRExpansionPlugin();
			OuterClass = UParentRelativeAttachmentComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RollTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RollTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RollTolerance, UParentRelativeAttachmentComponent), 0x0010000000000005);
				UProperty* NewProp_YawTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("YawTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(YawTolerance, UParentRelativeAttachmentComponent), 0x0010000000000005);
				UProperty* NewProp_PitchTolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PitchTolerance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(PitchTolerance, UParentRelativeAttachmentComponent), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockRoll, UParentRelativeAttachmentComponent, bool);
				UProperty* NewProp_bLockRoll = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockRoll"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockRoll, UParentRelativeAttachmentComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bLockRoll, UParentRelativeAttachmentComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockYaw, UParentRelativeAttachmentComponent, bool);
				UProperty* NewProp_bLockYaw = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockYaw"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockYaw, UParentRelativeAttachmentComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bLockYaw, UParentRelativeAttachmentComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLockPitch, UParentRelativeAttachmentComponent, bool);
				UProperty* NewProp_bLockPitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLockPitch"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLockPitch, UParentRelativeAttachmentComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bLockPitch, UParentRelativeAttachmentComponent), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Trigger PhysicsVolume ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("ParentRelativeAttachmentComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/ParentRelativeAttachmentComponent.h"));
				MetaData->SetValue(NewProp_RollTolerance, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_RollTolerance, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RollTolerance, TEXT("ModuleRelativePath"), TEXT("Public/ParentRelativeAttachmentComponent.h"));
				MetaData->SetValue(NewProp_RollTolerance, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_YawTolerance, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_YawTolerance, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_YawTolerance, TEXT("ModuleRelativePath"), TEXT("Public/ParentRelativeAttachmentComponent.h"));
				MetaData->SetValue(NewProp_YawTolerance, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_PitchTolerance, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_PitchTolerance, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_PitchTolerance, TEXT("ModuleRelativePath"), TEXT("Public/ParentRelativeAttachmentComponent.h"));
				MetaData->SetValue(NewProp_PitchTolerance, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_bLockRoll, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_bLockRoll, TEXT("ModuleRelativePath"), TEXT("Public/ParentRelativeAttachmentComponent.h"));
				MetaData->SetValue(NewProp_bLockYaw, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_bLockYaw, TEXT("ModuleRelativePath"), TEXT("Public/ParentRelativeAttachmentComponent.h"));
				MetaData->SetValue(NewProp_bLockPitch, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_bLockPitch, TEXT("ModuleRelativePath"), TEXT("Public/ParentRelativeAttachmentComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UParentRelativeAttachmentComponent(Z_Construct_UClass_UParentRelativeAttachmentComponent, &UParentRelativeAttachmentComponent::StaticClass, TEXT("UParentRelativeAttachmentComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UParentRelativeAttachmentComponent);
	UFunction* Z_Construct_UFunction_UReplicatedVRCameraComponent_OnRep_ReplicatedTransform()
	{
		UObject* Outer=Z_Construct_UClass_UReplicatedVRCameraComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_ReplicatedTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ReplicatedVRCameraComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UReplicatedVRCameraComponent_Server_SendTransform()
	{
		UObject* Outer=Z_Construct_UClass_UReplicatedVRCameraComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Server_SendTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x80220C40, 65535, sizeof(ReplicatedVRCameraComponent_eventServer_SendTransform_Parms));
			UProperty* NewProp_NewTransform = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NewTransform, ReplicatedVRCameraComponent_eventServer_SendTransform_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FBPVRComponentPosRep());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/ReplicatedVRCameraComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("I'm sending it unreliable because it is being resent pretty often"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UReplicatedVRCameraComponent_NoRegister()
	{
		return UReplicatedVRCameraComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UReplicatedVRCameraComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCameraComponent();
			Z_Construct_UPackage__Script_VRExpansionPlugin();
			OuterClass = UReplicatedVRCameraComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UReplicatedVRCameraComponent_OnRep_ReplicatedTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_UReplicatedVRCameraComponent_Server_SendTransform());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NetUpdateRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NetUpdateRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NetUpdateRate, UReplicatedVRCameraComponent), 0x0010000000000025);
				UProperty* NewProp_ReplicatedTransform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReplicatedTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReplicatedTransform, UReplicatedVRCameraComponent), 0x0010000100000034, Z_Construct_UScriptStruct_FBPVRComponentPosRep());
				NewProp_ReplicatedTransform->RepNotifyFunc = FName(TEXT("OnRep_ReplicatedTransform"));
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UReplicatedVRCameraComponent_OnRep_ReplicatedTransform(), "OnRep_ReplicatedTransform"); // 2364180053
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UReplicatedVRCameraComponent_Server_SendTransform(), "Server_SendTransform"); // 4268126170
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Mobility Rendering LOD Trigger PhysicsVolume ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("ReplicatedVRCameraComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/ReplicatedVRCameraComponent.h"));
				MetaData->SetValue(NewProp_NetUpdateRate, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_NetUpdateRate, TEXT("ModuleRelativePath"), TEXT("Public/ReplicatedVRCameraComponent.h"));
				MetaData->SetValue(NewProp_NetUpdateRate, TEXT("ToolTip"), TEXT("Rate to update the position to the server, 100htz is default (same as replication rate, should also hit every tick)."));
				MetaData->SetValue(NewProp_ReplicatedTransform, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_ReplicatedTransform, TEXT("ModuleRelativePath"), TEXT("Public/ReplicatedVRCameraComponent.h"));
				MetaData->SetValue(NewProp_ReplicatedTransform, TEXT("ToolTip"), TEXT("Whether to ever replicate position\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Replicated, Category = \"VRExpansionLibrary\")\nbool bReplicateTransform;"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UReplicatedVRCameraComponent(Z_Construct_UClass_UReplicatedVRCameraComponent, &UReplicatedVRCameraComponent::StaticClass, TEXT("UReplicatedVRCameraComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UReplicatedVRCameraComponent);
	UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRControllerProperty_String()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EVRControllerProperty_String_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVRControllerProperty_String"), 0, Get_Z_Construct_UEnum_VRExpansionPlugin_EVRControllerProperty_String_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVRControllerProperty_String"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_AttachedDeviceId_String")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_AttachedDeviceId_MAX")), 1));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EVRControllerProperty_String");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EVRControllerProperty_String_CRC() { return 3848693739U; }
	UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Float()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Float_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVRDeviceProperty_Float"), 0, Get_Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Float_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVRDeviceProperty_Float"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_DeviceBatteryPercentage_Float")), 12));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_DeviceBatteryPercentage_MAX")), 13));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EVRDeviceProperty_Float");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Float_CRC() { return 2998107657U; }
	UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Bool()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Bool_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVRDeviceProperty_Bool"), 0, Get_Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Bool_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVRDeviceProperty_Bool"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_WillDriftInYaw_Bool")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_DeviceIsWireless_Bool")), 10));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_DeviceIsCharging_Bool")), 11));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_Firmware_UpdateAvailable_Bool")), 14));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_Firmware_ManualUpdate_Bool")), 15));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_BlockServerShutdown_Bool")), 23));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_CanUnifyCoordinateSystemWithHmd_Bool")), 24));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_ContainsProximitySensor_Bool")), 25));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_DeviceProvidesBatteryStatus_Bool")), 26));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Prop_MAX")), 27));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EVRDeviceProperty_Bool");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Bool_CRC() { return 1633996441U; }
	UEnum* Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_String()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_String_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVRDeviceProperty_String"), 0, Get_Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_String_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVRDeviceProperty_String"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_TrackingSystemName_String")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_ModelNumber_String")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_SerialNumber_String")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_RenderModelName_String")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_ManufacturerName_String")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_TrackingFirmwareVersion_String")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_HardwareRevision_String")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_AllWirelessDongleDescriptions_String")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_ConnectedWirelessDongle_String")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_Firmware_ManualUpdateURL_String")), 16));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVRDeviceProperty_String::Prop_MAX")), 17));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EVRDeviceProperty_String");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_String_CRC() { return 3435772494U; }
	UEnum* Z_Construct_UEnum_VRExpansionPlugin_EAsyncBlueprintResultSwitch()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_VRExpansionPlugin();
		extern uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EAsyncBlueprintResultSwitch_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EAsyncBlueprintResultSwitch"), 0, Get_Z_Construct_UEnum_VRExpansionPlugin_EAsyncBlueprintResultSwitch_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EAsyncBlueprintResultSwitch"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAsyncBlueprintResultSwitch::OnSuccess")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAsyncBlueprintResultSwitch::AsyncLoading")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAsyncBlueprintResultSwitch::OnFailure")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EAsyncBlueprintResultSwitch::EAsyncBlueprintResultSwitch_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EAsyncBlueprintResultSwitch::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("AsyncLoading.ToolTip"), TEXT("On still loading async"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnEnum, TEXT("OnFailure.ToolTip"), TEXT("On Failure"));
			MetaData->SetValue(ReturnEnum, TEXT("OnSuccess.ToolTip"), TEXT("On Success"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("This will make using the load model as async easier to understand"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_VRExpansionPlugin_EAsyncBlueprintResultSwitch_CRC() { return 2235401085U; }
	UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_CloseVRHandles()
	{
		struct VRExpansionFunctionLibrary_eventCloseVRHandles_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRExpansionFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CloseVRHandles"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VRExpansionFunctionLibrary_eventCloseVRHandles_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VRExpansionFunctionLibrary_eventCloseVRHandles_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VRExpansionFunctionLibrary_eventCloseVRHandles_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VRExpansionFunctionLibrary_eventCloseVRHandles_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRExpansionFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Closes the handles for the library"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetHMDType()
	{
		struct VRExpansionFunctionLibrary_eventGetHMDType_Parms
		{
			TEnumAsByte<EBPHMDDeviceType> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRExpansionFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetHMDType"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VRExpansionFunctionLibrary_eventGetHMDType_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, VRExpansionFunctionLibrary_eventGetHMDType_Parms), 0x0010000000000580, Z_Construct_UEnum_VRExpansionPlugin_EBPHMDDeviceType());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRExpansionFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetHMDType"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets whether an HMD device is connected"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetIsHMDConnected()
	{
		struct VRExpansionFunctionLibrary_eventGetIsHMDConnected_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRExpansionFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetIsHMDConnected"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(VRExpansionFunctionLibrary_eventGetIsHMDConnected_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VRExpansionFunctionLibrary_eventGetIsHMDConnected_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VRExpansionFunctionLibrary_eventGetIsHMDConnected_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VRExpansionFunctionLibrary_eventGetIsHMDConnected_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRExpansionFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetIsHMDConnected"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets whether an HMD device is connected"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRControllerPropertyString()
	{
		struct VRExpansionFunctionLibrary_eventGetVRControllerPropertyString_Parms
		{
			TEnumAsByte<EVRControllerProperty_String> PropertyToRetrieve;
			int32 DeviceID;
			FString StringValue;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRExpansionFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRControllerPropertyString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(VRExpansionFunctionLibrary_eventGetVRControllerPropertyString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VRExpansionFunctionLibrary_eventGetVRControllerPropertyString_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VRExpansionFunctionLibrary_eventGetVRControllerPropertyString_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VRExpansionFunctionLibrary_eventGetVRControllerPropertyString_Parms), sizeof(bool), true);
			UProperty* NewProp_StringValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StringValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringValue, VRExpansionFunctionLibrary_eventGetVRControllerPropertyString_Parms), 0x0010000000000180);
			UProperty* NewProp_DeviceID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DeviceID, VRExpansionFunctionLibrary_eventGetVRControllerPropertyString_Parms), 0x0010000000000080);
			UProperty* NewProp_PropertyToRetrieve = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyToRetrieve"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PropertyToRetrieve, VRExpansionFunctionLibrary_eventGetVRControllerPropertyString_Parms), 0x0010000000000080, Z_Construct_UEnum_VRExpansionPlugin_EVRControllerProperty_String());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRExpansionFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetVRControllerPropertyString"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a String controller property"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDeviceModelAndTexture()
	{
		struct VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms
		{
			UObject* WorldContextObject;
			TEnumAsByte<ESteamVRTrackedDeviceType> DeviceType;
			TArray<UProceduralMeshComponent*> ProceduralMeshComponentsToFill;
			bool bCreateCollision;
			TEnumAsByte<EAsyncBlueprintResultSwitch::Type> Result;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRExpansionFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRDeviceModelAndTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms), 0x0010000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_Result = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Result"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(Result, VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms), 0x0010000000000180, Z_Construct_UEnum_VRExpansionPlugin_EAsyncBlueprintResultSwitch());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCreateCollision, VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms, bool);
			UProperty* NewProp_bCreateCollision = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bCreateCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCreateCollision, VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bCreateCollision, VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms), sizeof(bool), true);
			UProperty* NewProp_ProceduralMeshComponentsToFill = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ProceduralMeshComponentsToFill"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ProceduralMeshComponentsToFill, VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms), 0x0010008000000080);
			UProperty* NewProp_ProceduralMeshComponentsToFill_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ProceduralMeshComponentsToFill, TEXT("ProceduralMeshComponentsToFill"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000080000, Z_Construct_UClass_UProceduralMeshComponent_NoRegister());
			UProperty* NewProp_DeviceType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(DeviceType, VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms), 0x0010000000000080, Z_Construct_UEnum_SteamVR_ESteamVRTrackedDeviceType());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, VRExpansionFunctionLibrary_eventGetVRDeviceModelAndTexture_Parms), 0x0010000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRExpansionFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetVRDeviceModelAndTexture"));
			MetaData->SetValue(ReturnFunction, TEXT("ExpandEnumAsExecs"), TEXT("Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT(", TArray<uint8> & OutRawTexture, bool bReturnRawTexture = false"));
			MetaData->SetValue(ReturnFunction, TEXT("WorldContext"), TEXT("WorldContextObject"));
			MetaData->SetValue(NewProp_ProceduralMeshComponentsToFill, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyBool()
	{
		struct VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms
		{
			TEnumAsByte<EVRDeviceProperty_Bool> PropertyToRetrieve;
			int32 DeviceID;
			bool BoolValue;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRExpansionFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRDevicePropertyBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(BoolValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms, bool);
			UProperty* NewProp_BoolValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoolValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(BoolValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(BoolValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms), sizeof(bool), true);
			UProperty* NewProp_DeviceID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DeviceID, VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms), 0x0010000000000080);
			UProperty* NewProp_PropertyToRetrieve = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyToRetrieve"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PropertyToRetrieve, VRExpansionFunctionLibrary_eventGetVRDevicePropertyBool_Parms), 0x0010000000000080, Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Bool());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRExpansionFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetVRDevicePropertyBool"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a Bool device property"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyFloat()
	{
		struct VRExpansionFunctionLibrary_eventGetVRDevicePropertyFloat_Parms
		{
			TEnumAsByte<EVRDeviceProperty_Float> PropertyToRetrieve;
			int32 DeviceID;
			float FloatValue;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRExpansionFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRDevicePropertyFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(VRExpansionFunctionLibrary_eventGetVRDevicePropertyFloat_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyFloat_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyFloat_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyFloat_Parms), sizeof(bool), true);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyFloat_Parms), 0x0010000000000180);
			UProperty* NewProp_DeviceID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DeviceID, VRExpansionFunctionLibrary_eventGetVRDevicePropertyFloat_Parms), 0x0010000000000080);
			UProperty* NewProp_PropertyToRetrieve = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyToRetrieve"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PropertyToRetrieve, VRExpansionFunctionLibrary_eventGetVRDevicePropertyFloat_Parms), 0x0010000000000080, Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_Float());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRExpansionFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetVRDevicePropertyFloat"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a Float device property"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyString()
	{
		struct VRExpansionFunctionLibrary_eventGetVRDevicePropertyString_Parms
		{
			TEnumAsByte<EVRDeviceProperty_String> PropertyToRetrieve;
			int32 DeviceID;
			FString StringValue;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRExpansionFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRDevicePropertyString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(VRExpansionFunctionLibrary_eventGetVRDevicePropertyString_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyString_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyString_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyString_Parms), sizeof(bool), true);
			UProperty* NewProp_StringValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StringValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringValue, VRExpansionFunctionLibrary_eventGetVRDevicePropertyString_Parms), 0x0010000000000180);
			UProperty* NewProp_DeviceID = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeviceID"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DeviceID, VRExpansionFunctionLibrary_eventGetVRDevicePropertyString_Parms), 0x0010000000000080);
			UProperty* NewProp_PropertyToRetrieve = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PropertyToRetrieve"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PropertyToRetrieve, VRExpansionFunctionLibrary_eventGetVRDevicePropertyString_Parms), 0x0010000000000080, Z_Construct_UEnum_VRExpansionPlugin_EVRDeviceProperty_String());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRExpansionFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("GetVRDevicePropertyString"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a String device property"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRExpansionFunctionLibrary_OpenVRHandles()
	{
		struct VRExpansionFunctionLibrary_eventOpenVRHandles_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRExpansionFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OpenVRHandles"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(VRExpansionFunctionLibrary_eventOpenVRHandles_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, VRExpansionFunctionLibrary_eventOpenVRHandles_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, VRExpansionFunctionLibrary_eventOpenVRHandles_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, VRExpansionFunctionLibrary_eventOpenVRHandles_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("bIgnoreSelf"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRExpansionFunctions"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Opends the handles for the library"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVRExpansionFunctionLibrary_NoRegister()
	{
		return UVRExpansionFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UVRExpansionFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_VRExpansionPlugin();
			OuterClass = UVRExpansionFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVRExpansionFunctionLibrary_CloseVRHandles());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetHMDType());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetIsHMDConnected());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRControllerPropertyString());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDeviceModelAndTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyBool());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyString());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRExpansionFunctionLibrary_OpenVRHandles());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInitialized, UVRExpansionFunctionLibrary, bool);
				UProperty* NewProp_bInitialized = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInitialized"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInitialized, UVRExpansionFunctionLibrary), 0x0010000000000004, CPP_BOOL_PROPERTY_BITMASK(bInitialized, UVRExpansionFunctionLibrary), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRExpansionFunctionLibrary_CloseVRHandles(), "CloseVRHandles"); // 576032089
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetHMDType(), "GetHMDType"); // 1315315501
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetIsHMDConnected(), "GetIsHMDConnected"); // 1189561827
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRControllerPropertyString(), "GetVRControllerPropertyString"); // 1392352059
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDeviceModelAndTexture(), "GetVRDeviceModelAndTexture"); // 2903836755
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyBool(), "GetVRDevicePropertyBool"); // 404882034
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyFloat(), "GetVRDevicePropertyFloat"); // 1968651218
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRExpansionFunctionLibrary_GetVRDevicePropertyString(), "GetVRDevicePropertyString"); // 390199166
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRExpansionFunctionLibrary_OpenVRHandles(), "OpenVRHandles"); // 1877830874
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VRExpansionFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Had to turn this in to a UObject, I felt the easiest way to use it was as an actor component to the player controller\nIt can be returned to just a blueprint library if epic ever upgrade steam to 1.33 or above"));
				MetaData->SetValue(NewProp_bInitialized, TEXT("Category"), TEXT("VRExpansionFunctionLibrary"));
				MetaData->SetValue(NewProp_bInitialized, TEXT("ModuleRelativePath"), TEXT("Public/VRExpansionFunctionLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVRExpansionFunctionLibrary(Z_Construct_UClass_UVRExpansionFunctionLibrary, &UVRExpansionFunctionLibrary::StaticClass, TEXT("UVRExpansionFunctionLibrary"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVRExpansionFunctionLibrary);
	UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRForwardVector()
	{
		struct VRRootComponent_eventGetVRForwardVector_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRRootComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRForwardVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(VRRootComponent_eventGetVRForwardVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VRRootComponent_eventGetVRForwardVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MotionController"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRRootComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRLocation()
	{
		struct VRRootComponent_eventGetVRLocation_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRRootComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(VRRootComponent_eventGetVRLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VRRootComponent_eventGetVRLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MotionController"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRRootComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRRightVector()
	{
		struct VRRootComponent_eventGetVRRightVector_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRRootComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRRightVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(VRRootComponent_eventGetVRRightVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VRRootComponent_eventGetVRRightVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MotionController"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRRootComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRRotation()
	{
		struct VRRootComponent_eventGetVRRotation_Parms
		{
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRRootComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(VRRootComponent_eventGetVRRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VRRootComponent_eventGetVRRotation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MotionController"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRRootComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRRootComponent_GetVRUpVector()
	{
		struct VRRootComponent_eventGetVRUpVector_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UVRRootComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetVRUpVector"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(VRRootComponent_eventGetVRUpVector_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VRRootComponent_eventGetVRUpVector_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("MotionController"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRRootComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVRRootComponent_NoRegister()
	{
		return UVRRootComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UVRRootComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCapsuleComponent();
			Z_Construct_UPackage__Script_VRExpansionPlugin();
			OuterClass = UVRRootComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B01080;

				OuterClass->LinkChild(Z_Construct_UFunction_UVRRootComponent_GetVRForwardVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRRootComponent_GetVRLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRRootComponent_GetVRRightVector());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRRootComponent_GetVRRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRRootComponent_GetVRUpVector());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_VRCapsuleOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VRCapsuleOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(VRCapsuleOffset, UVRRootComponent), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_OffsetComponentToWorld = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OffsetComponentToWorld"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OffsetComponentToWorld, UVRRootComponent), 0x0010000000002014, Z_Construct_UScriptStruct_FTransform());
				UProperty* NewProp_TargetPrimitiveComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetPrimitiveComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(TargetPrimitiveComponent, UVRRootComponent), 0x001000000008200c, Z_Construct_UClass_USceneComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRRootComponent_GetVRForwardVector(), "GetVRForwardVector"); // 1737160919
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRRootComponent_GetVRLocation(), "GetVRLocation"); // 1900497671
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRRootComponent_GetVRRightVector(), "GetVRRightVector"); // 1235521166
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRRootComponent_GetVRRotation(), "GetVRRotation"); // 3850481623
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRRootComponent_GetVRUpVector(), "GetVRUpVector"); // 1034978580
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object LOD Lighting TextureStreaming Object LOD Lighting TextureStreaming Activation Components|Activation Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VRRootComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/VRRootComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("EXPERIMENTAL, don't use"));
				MetaData->SetValue(NewProp_VRCapsuleOffset, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_VRCapsuleOffset, TEXT("ModuleRelativePath"), TEXT("Public/VRRootComponent.h"));
				MetaData->SetValue(NewProp_VRCapsuleOffset, TEXT("ToolTip"), TEXT("Used to offset the collision (IE backwards from the player slightly."));
				MetaData->SetValue(NewProp_OffsetComponentToWorld, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_OffsetComponentToWorld, TEXT("ModuleRelativePath"), TEXT("Public/VRRootComponent.h"));
				MetaData->SetValue(NewProp_TargetPrimitiveComponent, TEXT("Category"), TEXT("VRExpansionLibrary"));
				MetaData->SetValue(NewProp_TargetPrimitiveComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_TargetPrimitiveComponent, TEXT("ModuleRelativePath"), TEXT("Public/VRRootComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVRRootComponent(Z_Construct_UClass_UVRRootComponent, &UVRRootComponent::StaticClass, TEXT("UVRRootComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVRRootComponent);
	UFunction* Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVR()
	{
		UObject* Outer=Z_Construct_UClass_UVRCharacterMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerMoveVR"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x80220C40, 65535, sizeof(VRCharacterMovementComponent_eventServerMoveVR_Parms));
			UProperty* NewProp_ClientMovementMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientMovementMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClientMovementMode, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080);
			UProperty* NewProp_ClientBaseBoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientBaseBoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ClientBaseBoneName, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080);
			UProperty* NewProp_ClientMovementBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientMovementBase"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ClientMovementBase, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_View = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("View"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(View, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080);
			UProperty* NewProp_ClientRoll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientRoll"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClientRoll, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080);
			UProperty* NewProp_CompressedMoveFlags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CompressedMoveFlags"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CompressedMoveFlags, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080);
			UProperty* NewProp_CapsuleYaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsuleYaw"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CapsuleYaw, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080);
			UProperty* NewProp_LFDiff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LFDiff"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LFDiff, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_CapsuleLoc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsuleLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CapsuleLoc, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_ClientLoc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClientLoc, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_InAccel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAccel"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InAccel, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize10());
			UProperty* NewProp_TimeStamp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeStamp"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeStamp, VRCharacterMovementComponent_eventServerMoveVR_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacterMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replicated function sent by client to server - contains client movement and view info."));
			MetaData->SetValue(NewProp_ClientMovementBase, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVRDual()
	{
		UObject* Outer=Z_Construct_UClass_UVRCharacterMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerMoveVRDual"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x80220C40, 65535, sizeof(VRCharacterMovementComponent_eventServerMoveVRDual_Parms));
			UProperty* NewProp_ClientMovementMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientMovementMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClientMovementMode, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_ClientBaseBoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientBaseBoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ClientBaseBoneName, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_ClientMovementBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientMovementBase"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ClientMovementBase, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_View = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("View"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(View, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_ClientRoll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientRoll"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClientRoll, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_NewFlags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewFlags"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NewFlags, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_CapsuleYaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsuleYaw"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CapsuleYaw, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_LFDiff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LFDiff"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LFDiff, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_CapsuleLoc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsuleLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CapsuleLoc, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_ClientLoc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClientLoc, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_InAccel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAccel"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InAccel, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize10());
			UProperty* NewProp_TimeStamp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeStamp"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeStamp, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_OldCapsuleYaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OldCapsuleYaw"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OldCapsuleYaw, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_OldLFDiff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OldLFDiff"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OldLFDiff, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_OldCapsuleLoc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OldCapsuleLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OldCapsuleLoc, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_View0 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("View0"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(View0, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_PendingFlags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PendingFlags"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PendingFlags, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			UProperty* NewProp_InAccel0 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAccel0"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InAccel0, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize10());
			UProperty* NewProp_TimeStamp0 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeStamp0"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeStamp0, VRCharacterMovementComponent_eventServerMoveVRDual_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacterMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replicated function sent by client to server - contains client movement and view info for two moves."));
			MetaData->SetValue(NewProp_ClientMovementBase, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVRDualHybridRootMotion()
	{
		UObject* Outer=Z_Construct_UClass_UVRCharacterMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerMoveVRDualHybridRootMotion"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x80220C40, 65535, sizeof(VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms));
			UProperty* NewProp_ClientMovementMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientMovementMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClientMovementMode, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_ClientBaseBoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientBaseBoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(ClientBaseBoneName, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_ClientMovementBase = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientMovementBase"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ClientMovementBase, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_View = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("View"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(View, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_ClientRoll = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientRoll"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ClientRoll, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_NewFlags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewFlags"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NewFlags, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_CapsuleYaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsuleYaw"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CapsuleYaw, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_LFDiff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LFDiff"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(LFDiff, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_CapsuleLoc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsuleLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CapsuleLoc, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_ClientLoc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ClientLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ClientLoc, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_InAccel = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAccel"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InAccel, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize10());
			UProperty* NewProp_TimeStamp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeStamp"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeStamp, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_OldCapsuleYaw = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OldCapsuleYaw"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(OldCapsuleYaw, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_OldLFDiff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OldLFDiff"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OldLFDiff, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_OldCapsuleLoc = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OldCapsuleLoc"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OldCapsuleLoc, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize100());
			UProperty* NewProp_View0 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("View0"), RF_Public|RF_Transient|RF_MarkAsNative) UUInt32Property(CPP_PROPERTY_BASE(View0, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_PendingFlags = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("PendingFlags"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(PendingFlags, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			UProperty* NewProp_InAccel0 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InAccel0"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InAccel0, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector_NetQuantize10());
			UProperty* NewProp_TimeStamp0 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TimeStamp0"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TimeStamp0, VRCharacterMovementComponent_eventServerMoveVRDualHybridRootMotion_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacterMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replicated function sent by client to server - contains client movement and view info for two moves. First move is non root motion, second is root motion."));
			MetaData->SetValue(NewProp_ClientMovementBase, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UVRCharacterMovementComponent_NoRegister()
	{
		return UVRCharacterMovementComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UVRCharacterMovementComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCharacterMovementComponent();
			Z_Construct_UPackage__Script_VRExpansionPlugin();
			OuterClass = UVRCharacterMovementComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00084;

				OuterClass->LinkChild(Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVR());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVRDual());
				OuterClass->LinkChild(Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVRDualHybridRootMotion());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WallRepulsionMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WallRepulsionMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(WallRepulsionMultiplier, UVRCharacterMovementComponent), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowWalkingThroughWalls, UVRCharacterMovementComponent, bool);
				UProperty* NewProp_bAllowWalkingThroughWalls = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowWalkingThroughWalls"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowWalkingThroughWalls, UVRCharacterMovementComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bAllowWalkingThroughWalls, UVRCharacterMovementComponent), sizeof(bool), true);
				UProperty* NewProp_VRRootCapsule = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VRRootCapsule"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(VRRootCapsule, UVRCharacterMovementComponent), 0x001000000008001c, Z_Construct_UClass_UVRRootComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVR(), "ServerMoveVR"); // 767653999
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVRDual(), "ServerMoveVRDual"); // 3329598520
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UVRCharacterMovementComponent_ServerMoveVRDualHybridRootMotion(), "ServerMoveVRDualHybridRootMotion"); // 2323083417
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VRCharacterMovementComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacterMovementComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("VRCharacterMovementComponent handles movement logic for the associated Character owner.\nIt supports various movement modes including: walking, falling, swimming, flying, custom.\n\nMovement is affected primarily by current Velocity and Acceleration. Acceleration is updated each frame\nbased on the input vector accumulated thus far (see UPawnMovementComponent::GetPendingInputVector()).\n\nNetworking is fully implemented, with server-client correction and prediction included.\n\n@see ACharacter, UPawnMovementComponent\n@see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Pawn/Character/"));
				MetaData->SetValue(NewProp_WallRepulsionMultiplier, TEXT("Category"), TEXT("VRCharacterMovementComponent"));
				MetaData->SetValue(NewProp_WallRepulsionMultiplier, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_WallRepulsionMultiplier, TEXT("ClampMin"), TEXT("0.01"));
				MetaData->SetValue(NewProp_WallRepulsionMultiplier, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacterMovementComponent.h"));
				MetaData->SetValue(NewProp_WallRepulsionMultiplier, TEXT("ToolTip"), TEXT("Higher values will cause more slide but better step up"));
				MetaData->SetValue(NewProp_WallRepulsionMultiplier, TEXT("UIMax"), TEXT("1"));
				MetaData->SetValue(NewProp_WallRepulsionMultiplier, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_bAllowWalkingThroughWalls, TEXT("Category"), TEXT("VRCharacterMovementComponent"));
				MetaData->SetValue(NewProp_bAllowWalkingThroughWalls, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacterMovementComponent.h"));
				MetaData->SetValue(NewProp_VRRootCapsule, TEXT("Category"), TEXT("VRMovement"));
				MetaData->SetValue(NewProp_VRRootCapsule, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VRRootCapsule, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacterMovementComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UVRCharacterMovementComponent(Z_Construct_UClass_UVRCharacterMovementComponent, &UVRCharacterMovementComponent::StaticClass, TEXT("UVRCharacterMovementComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UVRCharacterMovementComponent);
	UFunction* Z_Construct_UFunction_AVRCharacter_GetTeleportLocation()
	{
		struct VRCharacter_eventGetTeleportLocation_Parms
		{
			FVector OriginalLocation;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AVRCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTeleportLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14820401, 65535, sizeof(VRCharacter_eventGetTeleportLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, VRCharacter_eventGetTeleportLocation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_OriginalLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OriginalLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OriginalLocation, VRCharacter_eventGetTeleportLocation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("A helper function that offsets a given vector by the roots collision location\npass in a teleport location and it provides the correct spot for it to be at your feet"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AVRCharacter_NotifyOfTeleport()
	{
		UObject* Outer=Z_Construct_UClass_AVRCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NotifyOfTeleport"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00024CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("VRGrip"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacter.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AVRCharacter_NoRegister()
	{
		return AVRCharacter::StaticClass();
	}
	UClass* Z_Construct_UClass_AVRCharacter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage__Script_VRExpansionPlugin();
			OuterClass = AVRCharacter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_AVRCharacter_GetTeleportLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_AVRCharacter_NotifyOfTeleport());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RightMotionController = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RightMotionController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RightMotionController, AVRCharacter), 0x00100000000a001d, Z_Construct_UClass_UGripMotionControllerComponent_NoRegister());
				UProperty* NewProp_LeftMotionController = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LeftMotionController"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LeftMotionController, AVRCharacter), 0x00100000000a001d, Z_Construct_UClass_UGripMotionControllerComponent_NoRegister());
				UProperty* NewProp_ParentRelativeAttachment = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParentRelativeAttachment"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ParentRelativeAttachment, AVRCharacter), 0x00100000000a001d, Z_Construct_UClass_UParentRelativeAttachmentComponent_NoRegister());
				UProperty* NewProp_VRReplicatedCamera = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VRReplicatedCamera"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(VRReplicatedCamera, AVRCharacter), 0x00100000000a001d, Z_Construct_UClass_UReplicatedVRCameraComponent_NoRegister());
				UProperty* NewProp_VRMovementReference = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VRMovementReference"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(VRMovementReference, AVRCharacter), 0x00100000000a201d, Z_Construct_UClass_UVRCharacterMovementComponent_NoRegister());
				UProperty* NewProp_VRRootReference = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VRRootReference"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(VRRootReference, AVRCharacter), 0x00100000000a201d, Z_Construct_UClass_UVRRootComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AVRCharacter_GetTeleportLocation(), "GetTeleportLocation"); // 3183141129
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_AVRCharacter_NotifyOfTeleport(), "NotifyOfTeleport"); // 4163682109
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("VRCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacter.h"));
				MetaData->SetValue(NewProp_RightMotionController, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_RightMotionController, TEXT("Category"), TEXT("VRCharacter"));
				MetaData->SetValue(NewProp_RightMotionController, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_RightMotionController, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacter.h"));
				MetaData->SetValue(NewProp_LeftMotionController, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_LeftMotionController, TEXT("Category"), TEXT("VRCharacter"));
				MetaData->SetValue(NewProp_LeftMotionController, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LeftMotionController, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacter.h"));
				MetaData->SetValue(NewProp_ParentRelativeAttachment, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_ParentRelativeAttachment, TEXT("Category"), TEXT("VRCharacter"));
				MetaData->SetValue(NewProp_ParentRelativeAttachment, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ParentRelativeAttachment, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacter.h"));
				MetaData->SetValue(NewProp_VRReplicatedCamera, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_VRReplicatedCamera, TEXT("Category"), TEXT("VRCharacter"));
				MetaData->SetValue(NewProp_VRReplicatedCamera, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VRReplicatedCamera, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacter.h"));
				MetaData->SetValue(NewProp_VRMovementReference, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_VRMovementReference, TEXT("Category"), TEXT("VRCharacter"));
				MetaData->SetValue(NewProp_VRMovementReference, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VRMovementReference, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacter.h"));
				MetaData->SetValue(NewProp_VRRootReference, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_VRRootReference, TEXT("Category"), TEXT("VRCharacter"));
				MetaData->SetValue(NewProp_VRRootReference, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_VRRootReference, TEXT("ModuleRelativePath"), TEXT("Public/VRCharacter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AVRCharacter(Z_Construct_UClass_AVRCharacter, &AVRCharacter::StaticClass, TEXT("AVRCharacter"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AVRCharacter);
	UPackage* Z_Construct_UPackage__Script_VRExpansionPlugin()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/VRExpansionPlugin")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xC996AB9F;
			Guid.B = 0x9AA37B41;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
